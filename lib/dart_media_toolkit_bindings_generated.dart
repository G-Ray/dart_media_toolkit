// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/dart_media_toolkit.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class DartMediaToolkitBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartMediaToolkitBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartMediaToolkitBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int get_byte_offset(
    ffi.Pointer<ffi.Char> filename,
    int ts,
  ) {
    return _get_byte_offset(
      filename,
      ts,
    );
  }

  late final _get_byte_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Char>, ffi.Int64)>>('get_byte_offset');
  late final _get_byte_offset = _get_byte_offsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();
}
